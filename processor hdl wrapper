library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
library UNISIM;
use UNISIM.VCOMPONENTS.ALL;
entity processpr_1 is
 port (
 B_0 : out STD_LOGIC_VECTOR ( 4 downto 0 );
 CTS : out STD_LOGIC;
 G_0 : out STD_LOGIC_VECTOR ( 5 downto 0 );
 RTS : out STD_LOGIC;
 RXD_0 : in STD_LOGIC;
 R_0 : out STD_LOGIC_VECTOR ( 4 downto 0 );
 TXD_0 : out STD_LOGIC;
 btn_0 : in STD_LOGIC;
 clk_0 : in STD_LOGIC;
 hs_0 : out STD_LOGIC;
 vs_1 : out STD_LOGIC
 );
 attribute CORE_GENERATION_INFO : string;
 attribute CORE_GENERATION_INFO of processpr_1 : entity is
"processpr_1,IP_Integrator,{x_ipVendor=xilinx.com,x_ipLibrary=BlockDiagram,x_ipName=proces
spr_1,x_ipVersion=1.00.a,x_ipLanguage=VHDL,numBlks=12,numReposBlks=12,numNonXlnxBl
ks=0,numHierBlks=0,maxHierDepth=0,numSysgenBlks=0,numHlsBlks=0,numHdlrefBlks=10,nu
mPkgbdBlks=0,bdsource=USER,synth_mode=OOC_per_IP}";
 attribute HW_HANDOFF : string;
 attribute HW_HANDOFF of processpr_1 : entity is "processpr_1.hwdef";
end processpr_1;
architecture STRUCTURE of processpr_1 is
 component processpr_1_clk_div115200_0_0 is
 port (
 en : out STD_LOGIC;
 clk : in STD_LOGIC
 );
 end component processpr_1_clk_div115200_0_0;
 component processpr_1_clk_divider_0_0 is
 port (
 en : out STD_LOGIC;
 clk : in STD_LOGIC
 );
 end component processpr_1_clk_divider_0_0;
 component processpr_1_debounce_0_0 is
 port (
 btn : in STD_LOGIC;
 clk : in STD_LOGIC;
 dbnc : out STD_LOGIC
 );
 end component processpr_1_debounce_0_0;
 component processpr_1_blk_mem_gen_0_3 is
 port (
 clka : in STD_LOGIC;
 wea : in STD_LOGIC_VECTOR ( 0 to 0 );
 addra : in STD_LOGIC_VECTOR ( 15 downto 0 );
 dina : in STD_LOGIC_VECTOR ( 15 downto 0 );
 douta : out STD_LOGIC_VECTOR ( 15 downto 0 )
 );
 end component processpr_1_blk_mem_gen_0_3;
 component processpr_1_blk_mem_gen_0_4 is
 port (
 clka : in STD_LOGIC;
 addra : in STD_LOGIC_VECTOR ( 13 downto 0 );
 douta : out STD_LOGIC_VECTOR ( 31 downto 0 )
 );
 end component processpr_1_blk_mem_gen_0_4;
 component processpr_1_uart_0_0 is
 port (
 clk : in STD_LOGIC;
 en : in STD_LOGIC;
 send : in STD_LOGIC;
 rx : in STD_LOGIC;
 rst : in STD_LOGIC;
 charSend : in STD_LOGIC_VECTOR ( 7 downto 0 );
 ready : out STD_LOGIC;
 tx : out STD_LOGIC;
 newChar : out STD_LOGIC;
 charRec : out STD_LOGIC_VECTOR ( 7 downto 0 )
 );
 end component processpr_1_uart_0_0;
 component processpr_1_my_alu_0_0 is
 port (
 A : in STD_LOGIC_VECTOR ( 15 downto 0 );
 B : in STD_LOGIC_VECTOR ( 15 downto 0 );
 en : in STD_LOGIC;
 opcode : in STD_LOGIC_VECTOR ( 3 downto 0 );
 alu_out : out STD_LOGIC_VECTOR ( 15 downto 0 )
 );
 end component processpr_1_my_alu_0_0;
 component processpr_1_vga_ctrl_0_0 is
 port (
 clk : in STD_LOGIC;
 en : in STD_LOGIC;
 hcount : out STD_LOGIC_VECTOR ( 9 downto 0 );
 vcount : out STD_LOGIC_VECTOR ( 9 downto 0 );
 vid : out STD_LOGIC;
 hs : out STD_LOGIC;
 vs : out STD_LOGIC
 );
 end component processpr_1_vga_ctrl_0_0;
 component processpr_1_regs_0_0 is
 port (
 clk : in STD_LOGIC;
 en : in STD_LOGIC;
 rst : in STD_LOGIC;
 id1 : in STD_LOGIC_VECTOR ( 4 downto 0 );
 id2 : in STD_LOGIC_VECTOR ( 4 downto 0 );
 wr_en1 : in STD_LOGIC;
 wr_en2 : in STD_LOGIC;
 din1 : in STD_LOGIC_VECTOR ( 15 downto 0 );
 din2 : in STD_LOGIC_VECTOR ( 15 downto 0 );
 dout1 : out STD_LOGIC_VECTOR ( 15 downto 0 );
 dout2 : out STD_LOGIC_VECTOR ( 15 downto 0 )
 );
 end component processpr_1_regs_0_0;
 component processpr_1_framebuffer_0_0 is
 port (
 clk1 : in STD_LOGIC;
 en1 : in STD_LOGIC;
 en2 : in STD_LOGIC;
 rst : in STD_LOGIC;
 ld : in STD_LOGIC;
 addr1 : in STD_LOGIC_VECTOR ( 11 downto 0 );
 addr2 : in STD_LOGIC_VECTOR ( 11 downto 0 );
 wr_en1 : in STD_LOGIC;
 din1 : in STD_LOGIC_VECTOR ( 15 downto 0 );
 dout1 : out STD_LOGIC_VECTOR ( 15 downto 0 );
 dout2 : out STD_LOGIC_VECTOR ( 15 downto 0 )
 );
 end component processpr_1_framebuffer_0_0;
 component processpr_1_pixel_pusher_0_0 is
 port (
 clk : in STD_LOGIC;
 en : in STD_LOGIC;
 vs : in STD_LOGIC;
 vid : in STD_LOGIC;
 pixel : in STD_LOGIC_VECTOR ( 15 downto 0 );
 vcount : in STD_LOGIC_VECTOR ( 9 downto 0 );
 hcount : in STD_LOGIC_VECTOR ( 9 downto 0 );
 R : out STD_LOGIC_VECTOR ( 4 downto 0 );
 B : out STD_LOGIC_VECTOR ( 4 downto 0 );
 G : out STD_LOGIC_VECTOR ( 5 downto 0 );
 addr : out STD_LOGIC_VECTOR ( 11 downto 0 )
 );
 end component processpr_1_pixel_pusher_0_0;
 component processpr_1_controls_0_0 is
 port (
 clk : in STD_LOGIC;
 en : in STD_LOGIC;
 rst : in STD_LOGIC;
 rID1 : out STD_LOGIC_VECTOR ( 4 downto 0 );
 rID2 : out STD_LOGIC_VECTOR ( 4 downto 0 );
 wr_enR1 : out STD_LOGIC;
 wr_enR2 : out STD_LOGIC;
 regrD1 : in STD_LOGIC_VECTOR ( 15 downto 0 );
 regrD2 : in STD_LOGIC_VECTOR ( 15 downto 0 );
 regwD1 : out STD_LOGIC_VECTOR ( 15 downto 0 );
 regwD2 : out STD_LOGIC_VECTOR ( 15 downto 0 );
 fbRST : out STD_LOGIC;
 fbLd : out STD_LOGIC;
 fbWr_en1 : out STD_LOGIC;
 fbAddr1 : out STD_LOGIC_VECTOR ( 11 downto 0 );
 fbDin1 : in STD_LOGIC_VECTOR ( 15 downto 0 );
 fbDout1 : out STD_LOGIC_VECTOR ( 15 downto 0 );
 irAddr : out STD_LOGIC_VECTOR ( 13 downto 0 );
 irWord : in STD_LOGIC_VECTOR ( 31 downto 0 );
 dAddr : out STD_LOGIC_VECTOR ( 14 downto 0 );
 d_wr_en : out STD_LOGIC;
 dOut : out STD_LOGIC_VECTOR ( 15 downto 0 );
 dIn : in STD_LOGIC_VECTOR ( 15 downto 0 );
 aluA : out STD_LOGIC_VECTOR ( 15 downto 0 );
 aluB : out STD_LOGIC_VECTOR ( 15 downto 0 );
 aluOp : out STD_LOGIC_VECTOR ( 3 downto 0 );
 aluResult : in STD_LOGIC_VECTOR ( 15 downto 0 );
 ready : in STD_LOGIC;
 newChar : in STD_LOGIC;
 send : out STD_LOGIC;
 charRec : in STD_LOGIC_VECTOR ( 7 downto 0 );
 charSend : out STD_LOGIC_VECTOR ( 7 downto 0 )
 );
 end component processpr_1_controls_0_0;
 signal btn_0_1 : STD_LOGIC;
 signal clk_0_1 : STD_LOGIC;
 signal clk_div115200_0_en : STD_LOGIC;
 signal clk_divider_0_en : STD_LOGIC;
 signal controls_0_aluA : STD_LOGIC_VECTOR ( 15 downto 0 );
signal controls_0_aluB : STD_LOGIC_VECTOR ( 15 downto 0 );
 signal controls_0_aluOp : STD_LOGIC_VECTOR ( 3 downto 0 );
 signal controls_0_charSend : STD_LOGIC_VECTOR ( 7 downto 0 );
 signal controls_0_dAddr : STD_LOGIC_VECTOR ( 14 downto 0 );
 signal controls_0_dOut : STD_LOGIC_VECTOR ( 15 downto 0 );
 signal controls_0_d_wr_en : STD_LOGIC;
 signal controls_0_fbAddr1 : STD_LOGIC_VECTOR ( 11 downto 0 );
 signal controls_0_fbDout1 : STD_LOGIC_VECTOR ( 15 downto 0 );
 signal controls_0_fbLd : STD_LOGIC;
 signal controls_0_fbRST : STD_LOGIC;
 signal controls_0_fbWr_en1 : STD_LOGIC;
 signal controls_0_irAddr : STD_LOGIC_VECTOR ( 13 downto 0 );
 signal controls_0_rID1 : STD_LOGIC_VECTOR ( 4 downto 0 );
 signal controls_0_rID2 : STD_LOGIC_VECTOR ( 4 downto 0 );
 signal controls_0_regwD1 : STD_LOGIC_VECTOR ( 15 downto 0 );
 signal controls_0_regwD2 : STD_LOGIC_VECTOR ( 15 downto 0 );
 signal controls_0_send : STD_LOGIC;
 signal controls_0_wr_enR1 : STD_LOGIC;
 signal controls_0_wr_enR2 : STD_LOGIC;
 signal dMem_douta : STD_LOGIC_VECTOR ( 15 downto 0 );
 signal debounce_0_dbnc : STD_LOGIC;
 signal framebuffer_0_dout1 : STD_LOGIC_VECTOR ( 15 downto 0 );
 signal framebuffer_0_dout2 : STD_LOGIC_VECTOR ( 15 downto 0 );
 signal irMem_douta : STD_LOGIC_VECTOR ( 31 downto 0 );
 signal my_alu_0_alu_out : STD_LOGIC_VECTOR ( 15 downto 0 );
 signal pixel_pusher_0_B : STD_LOGIC_VECTOR ( 4 downto 0 );
 signal pixel_pusher_0_G : STD_LOGIC_VECTOR ( 5 downto 0 );
 signal pixel_pusher_0_R : STD_LOGIC_VECTOR ( 4 downto 0 );
 signal pixel_pusher_0_addr : STD_LOGIC_VECTOR ( 11 downto 0 );
 signal regs_0_dout1 : STD_LOGIC_VECTOR ( 15 downto 0 );
 signal regs_0_dout2 : STD_LOGIC_VECTOR ( 15 downto 0 );
 signal rx_0_1 : STD_LOGIC;
 signal uart_0_charRec : STD_LOGIC_VECTOR ( 7 downto 0 );
 signal uart_0_newChar : STD_LOGIC;
 signal uart_0_ready : STD_LOGIC;
 signal uart_0_tx : STD_LOGIC;
 signal vga_ctrl_0_hcount : STD_LOGIC_VECTOR ( 9 downto 0 );
 signal vga_ctrl_0_hs : STD_LOGIC;
 signal vga_ctrl_0_vcount : STD_LOGIC_VECTOR ( 9 downto 0 );
 signal vga_ctrl_0_vid : STD_LOGIC;
 signal vga_ctrl_0_vs : STD_LOGIC;
 signal NLW_dMem_addra_UNCONNECTED : STD_LOGIC_VECTOR ( 15 to 15 );
 attribute X_INTERFACE_INFO : string;
 attribute X_INTERFACE_INFO of clk_0 : signal is "xilinx.com:signal:clock:1.0 CLK.CLK_0
CLK";
 attribute X_INTERFACE_PARAMETER : string;
 attribute X_INTERFACE_PARAMETER of clk_0 : signal is "XIL_INTERFACENAME
CLK.CLK_0, CLK_DOMAIN processpr_1_clk_0, FREQ_HZ 100000000, INSERT_VIP 0, PHASE
0.000";
begin
 B_0(4 downto 0) <= pixel_pusher_0_B(4 downto 0);
 G_0(5 downto 0) <= pixel_pusher_0_G(5 downto 0);
 R_0(4 downto 0) <= pixel_pusher_0_R(4 downto 0);
 TXD_0 <= uart_0_tx;
 btn_0_1 <= btn_0;
 clk_0_1 <= clk_0;
 hs_0 <= vga_ctrl_0_hs;
 rx_0_1 <= RXD_0;
 vs_1 <= vga_ctrl_0_vs;
 CTS <= 'Z';
 RTS <= 'Z';
clk_div115200_0: component processpr_1_clk_div115200_0_0
 port map (
 clk => clk_0_1,
 en => clk_div115200_0_en
 );
clk_divider_0: component processpr_1_clk_divider_0_0
 port map (
 clk => clk_0_1,
 en => clk_divider_0_en
 );
controls_0: component processpr_1_controls_0_0
 port map (
 aluA(15 downto 0) => controls_0_aluA(15 downto 0),
 aluB(15 downto 0) => controls_0_aluB(15 downto 0),
 aluOp(3 downto 0) => controls_0_aluOp(3 downto 0),
 aluResult(15 downto 0) => my_alu_0_alu_out(15 downto 0),
 charRec(7 downto 0) => uart_0_charRec(7 downto 0),
 charSend(7 downto 0) => controls_0_charSend(7 downto 0),
 clk => clk_0_1,
 dAddr(14 downto 0) => controls_0_dAddr(14 downto 0),
 dIn(15 downto 0) => dMem_douta(15 downto 0),
 dOut(15 downto 0) => controls_0_dOut(15 downto 0),
 d_wr_en => controls_0_d_wr_en,
 en => clk_div115200_0_en,
 fbAddr1(11 downto 0) => controls_0_fbAddr1(11 downto 0),
 fbDin1(15 downto 0) => framebuffer_0_dout1(15 downto 0),
 fbDout1(15 downto 0) => controls_0_fbDout1(15 downto 0),
 fbLd => controls_0_fbLd,
 fbRST => controls_0_fbRST,
 fbWr_en1 => controls_0_fbWr_en1,
 irAddr(13 downto 0) => controls_0_irAddr(13 downto 0),
 irWord(31 downto 0) => irMem_douta(31 downto 0),
 newChar => uart_0_newChar,
 rID1(4 downto 0) => controls_0_rID1(4 downto 0),
 rID2(4 downto 0) => controls_0_rID2(4 downto 0),
 ready => uart_0_ready,
 regrD1(15 downto 0) => regs_0_dout1(15 downto 0),
 regrD2(15 downto 0) => regs_0_dout2(15 downto 0),
 regwD1(15 downto 0) => controls_0_regwD1(15 downto 0),
 regwD2(15 downto 0) => controls_0_regwD2(15 downto 0),
 rst => debounce_0_dbnc,
 send => controls_0_send,
 wr_enR1 => controls_0_wr_enR1,
 wr_enR2 => controls_0_wr_enR2
 );
dMem: component processpr_1_blk_mem_gen_0_3
 port map (
 addra(15) => NLW_dMem_addra_UNCONNECTED(15),
 addra(14 downto 0) => controls_0_dAddr(14 downto 0),
 clka => clk_0_1,
 dina(15 downto 0) => controls_0_dOut(15 downto 0),
 douta(15 downto 0) => dMem_douta(15 downto 0),
 wea(0) => controls_0_d_wr_en
 );
debounce_0: component processpr_1_debounce_0_0
 port map (
 btn => btn_0_1,
 clk => clk_0_1,
 dbnc => debounce_0_dbnc
 );
framebuffer_0: component processpr_1_framebuffer_0_0
 port map (
 addr1(11 downto 0) => controls_0_fbAddr1(11 downto 0),
 addr2(11 downto 0) => pixel_pusher_0_addr(11 downto 0),
 clk1 => clk_0_1,
 din1(15 downto 0) => controls_0_fbDout1(15 downto 0),
 dout1(15 downto 0) => framebuffer_0_dout1(15 downto 0),
 dout2(15 downto 0) => framebuffer_0_dout2(15 downto 0),
 en1 => clk_div115200_0_en,
 en2 => clk_divider_0_en,
 ld => controls_0_fbLd,
 rst => controls_0_fbRST,
 wr_en1 => controls_0_fbWr_en1
 );
irMem: component processpr_1_blk_mem_gen_0_4
 port map (
 addra(13 downto 0) => controls_0_irAddr(13 downto 0),
 clka => clk_0_1,
 douta(31 downto 0) => irMem_douta(31 downto 0)
 );
my_alu_0: component processpr_1_my_alu_0_0
 port map (
 A(15 downto 0) => controls_0_aluA(15 downto 0),
 B(15 downto 0) => controls_0_aluB(15 downto 0),
 alu_out(15 downto 0) => my_alu_0_alu_out(15 downto 0),
 en => clk_div115200_0_en,
 opcode(3 downto 0) => controls_0_aluOp(3 downto 0)
 );
pixel_pusher_0: component processpr_1_pixel_pusher_0_0
 port map (
 B(4 downto 0) => pixel_pusher_0_B(4 downto 0),
 G(5 downto 0) => pixel_pusher_0_G(5 downto 0),
 R(4 downto 0) => pixel_pusher_0_R(4 downto 0),
 addr(11 downto 0) => pixel_pusher_0_addr(11 downto 0),
 clk => clk_0_1,
 en => clk_divider_0_en,
 hcount(9 downto 0) => vga_ctrl_0_hcount(9 downto 0),
 pixel(15 downto 0) => framebuffer_0_dout2(15 downto 0),
 vcount(9 downto 0) => vga_ctrl_0_vcount(9 downto 0),
 vid => vga_ctrl_0_vid,
 vs => vga_ctrl_0_vs
 );
regs_0: component processpr_1_regs_0_0
 port map (
 clk => clk_0_1,
 din1(15 downto 0) => controls_0_regwD1(15 downto 0),
 din2(15 downto 0) => controls_0_regwD2(15 downto 0),
 dout1(15 downto 0) => regs_0_dout1(15 downto 0),
 dout2(15 downto 0) => regs_0_dout2(15 downto 0),
 en => clk_div115200_0_en,
 id1(4 downto 0) => controls_0_rID1(4 downto 0),
 id2(4 downto 0) => controls_0_rID2(4 downto 0),
 rst => debounce_0_dbnc,
 wr_en1 => controls_0_wr_enR1,
 wr_en2 => controls_0_wr_enR2
 );
uart_0: component processpr_1_uart_0_0
 port map (
 charRec(7 downto 0) => uart_0_charRec(7 downto 0),
 charSend(7 downto 0) => controls_0_charSend(7 downto 0),
 clk => clk_0_1,
 en => clk_div115200_0_en,
 newChar => uart_0_newChar,
 ready => uart_0_ready,
 rst => debounce_0_dbnc,
 rx => rx_0_1,
 send => controls_0_send,
 tx => uart_0_tx
 );
vga_ctrl_0: component processpr_1_vga_ctrl_0_0
 port map (
 clk => clk_divider_0_en,
 en => clk_divider_0_en,
 hcount(9 downto 0) => vga_ctrl_0_hcount(9 downto 0),
 hs => vga_ctrl_0_hs,
 vcount(9 downto 0) => vga_ctrl_0_vcount(9 downto 0),
 vid => vga_ctrl_0_vid,
 vs => vga_ctrl_0_vs
 );
end STRUCTURE; 
