library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use IEEE.NUMERIC_STD.ALL;
entity framebuffer_tb is
-- Port ( );
end framebuffer_tb;
architecture Behavioral of framebuffer_tb is
component framebuffer is
 port (
 clk1, en1, en2, ld, rst : in std_logic;
 addr1, addr2 : in std_logic_vector(11 downto 0);
 wr_en1: in std_logic;
 din1: in std_logic_vector(15 downto 0);
 dout1, dout2 : out std_logic_vector(15 downto 0)
 );
end component;
signal clktb, rsttb : std_logic := '0';
signal en1tb, en2tb, ldtb, wr_en1tb : std_logic := '1';
signal addr1tb, addr2tb : std_logic_vector(11 downto 0) := (others => '0');
signal din1tb : std_logic_vector(15 downto 0) := (others => '0');
begin
clk_gen_proc: process
 begin
 wait for 5 ns;
 clktb <= '1';
 wait for 5 ns;
 clktb <= '0';
end process clk_gen_proc;
simulate: process(clktb)
 begin
 if (unsigned(addr1tb) <= 4095) then
 din1tb <= std_logic_vector(unsigned(din1tb) + 1);
 addr1tb <= std_logic_vector(unsigned(addr1tb) + 1);
 end if;
end process simulate;
 u1: framebuffer
 port map(
 clk1 => clktb,
 en1 => en1tb,
 en2 => en2tb,
 ld => ldtb,
 rst => rsttb,
 addr1 => addr1tb,
 addr2 => addr2tb,
 din1 => din1tb,
 wr_en1 => wr_en1tb
);
end Behavioral;
