library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;
entity controls is
 Port (-- Timing
clk , en , rst : in std_logic ;
-- Register
rID1 , rID2 : out std_logic_vector ( 4 downto 0 ) ;
wr_enR1 , wr_enR2 : out std_logic ;
regrD1 , regrD2 : in std_logic_vector ( 15 downto 0 ) ;
regwD1 , regwD2 : out std_logic_vector ( 15 downto 0 ) ;
-- Framebuffer
fbRST, fbLd, fbWr_en1 : out std_logic ;
fbAddr1 : out std_logic_vector ( 11 downto 0 ) ;
fbDin1 : in std_logic_vector ( 15 downto 0 ) ;
fbDout1 : out std_logic_vector ( 15 downto 0 ) ;
-- Instruction Memory
irAddr : out std_logic_vector ( 13 downto 0 ) ;
irWord : in std_logic_vector ( 31 downto 0 ) ;
-- Data Memory
dAddr : out std_logic_vector ( 14 downto 0 ) ;
d_wr_en : out std_logic ;
dOut : out std_logic_vector ( 15 downto 0 ) ;
dIn : in std_logic_vector ( 15 downto 0 ) ;
-- ALU
aluA , aluB : out std_logic_vector ( 15 downto 0 ) ;
aluOp : out std_logic_vector ( 3 downto 0 ) ;
aluResult : in std_logic_vector ( 15 downto 0 ) ;
-- UART
ready , newChar : in std_logic ;
send : out std_logic;
charRec : in std_logic_vector ( 7 downto 0 ) ;
charSend : out std_logic_vector (7 downto 0) );
end controls;
architecture fsm of controls is
type state is ( fetch , fetch2 , decode , decode2 , decode3 , decode4 , Rops , Rops2 , Rops3 ,
Iops , Iops2, Iops3 , Jops , pre_calc, calc, calc2 , store , jr , recv ,
rpix , wpix , wpix2 , sendas , sendas2 , sendas3 , equals ,
equals2 , nequal , nequal2 , ori , lw , sw , sw2 , jmp , jal , clrscr , finish , im_ALU , im_REG ,
im_FB, im_DATA ) ;
signal curr : state := fetch ;
signal PC : std_logic_vector ( 15 downto 0 ) := ( others => '0' ) ;
signal instr : std_logic_vector ( 31 downto 0 ) := ( others => '0' ) ;
signal reg1 : std_logic_vector ( 15 downto 0 ) := ( others => '0' ) ;
signal reg2 : std_logic_vector ( 15 downto 0 ) := ( others => '0' ) ;
signal reg3 : std_logic_vector ( 15 downto 0 ) := ( others => '0' ) ;
signal imm : std_logic_vector ( 15 downto 0 ) := ( others => '0' ) ;
signal opcode : std_logic_vector ( 4 downto 0 ) := ( others => '0' ) ;
signal aluSig : std_logic_vector ( 15 downto 0 ) := ( others => '0' ) ;
signal regrD1Sig : std_logic_vector ( 4 downto 0 ) := ( others => '0' ) ; -- register
signal regrD2Sig : std_logic_vector ( 4 downto 0 ) := ( others => '0' ) ;
signal regrD3Sig : std_logic_vector (4 downto 0 ) := ( others => '0') ;
begin

 process (clk)
 begin

 if rising_edge(clk) then
 if (rst = '1') then
 curr <= clrscr;
 elsif (en = '1') then
 case curr is
 when fetch =>
 rID1 <= "00001";
 curr <= fetch2;
 when fetch2 =>
 PC <= regrD1;
 curr <= decode;

 when decode =>
 irAddr <= PC(13 downto 0);
 curr <= decode2;
 when decode2 =>
 instr <= irWord;
 PC <= std_logic_vector(unsigned(PC) + 1);
 curr <= decode3;

 when decode3 =>
 opcode <= instr(31 downto 27);
 curr <= decode4;

 when decode4 =>
 rID1 <= "00001";
 wr_enR1 <= '1';
 regwD1 <= PC;
 if(opcode(4) = '0') then
 curr <= Rops;
 elsif(opcode(4 downto 3) = "10") then
 curr <= Iops;
 else
 curr <= Jops;
 end if;

 when Rops =>
 wr_enR1 <= '0';
 regrD1Sig <= instr (26 downto 22);
 regrD2Sig <= instr (21 downto 17);
 regrD3Sig <= instr (16 downto 12);
 curr <= Rops2;

 when Rops2 =>
 rID1 <= regrD2Sig;
 rID2 <= regrD3sig;
 curr <= Rops3;

 when Rops3 =>
 reg2 <= regrD1;
 reg3 <= regrD2;
 rID1 <= regrD1Sig;
 if (opcode = "01101") then
 curr <= jr;
 elsif (opcode = "01100") then
 curr <= recv;
 elsif (opcode = "01111") then
 curr <= rpix;
 elsif (opcode = "01110") then
 curr <= wpix;
 elsif (opcode = "01011") then
 curr <= sendas;
 else
 rID1 <= regrD1Sig;
 curr <= pre_calc;
 end if;
 when Iops =>
 wr_enR1 <= '0';
 regrD1Sig <= instr(26 downto 22);
 regrD2Sig <= instr(21 downto 17);
 imm <= instr(16 downto 1);
 curr <= Iops2;
 when Iops2 =>
 rID1 <= regrD2Sig;
 curr <= Iops3;
 when Iops3 =>
 reg2 <= regrD1;
 rID1 <= regrD1Sig;
 if (opcode(2 downto 0) = "000") then
 curr <= equals;
 elsif (opcode(2 downto 0) = "001") then
 curr <= nequal;
 elsif (opcode(2 downto 0) = "010") then
 curr <= ori;
 elsif (opcode(2 downto 0) = "011") then
 curr <= lw;
 else
 curr <= sw;
 end if;
 when Jops =>
 wr_enR1 <= '0';
 imm <= instr(26 downto 11);
 if (opcode = "11000") then
 curr <= jmp;
 elsif (opcode = "11001") then
 curr <= jal;
 else
 curr <= clrscr;
 end if;
 when pre_calc =>
 reg1 <= regrD1;
 curr <= calc;
 when calc =>
 aluA <= reg2;
 aluB <= reg3;
 case opcode is
 when "00000" => 
 aluOp <= "0000";
 when "00001" =>
 aluOp <= "0001";
 when "00010" =>
 aluOp <= "0101";
 when "00011" =>
 aluOp <= "0110";
 when "00100" =>
 aluOp <= "0111";
 when "00101" =>
 aluOp <= "1000";
 when "00110" =>
 aluOp <= "1001";
 when "00111" =>
 aluOp <= "1010";
 when "01000" =>
 aluOp <= "1011";
 when "01001" =>
 aluOp <= "1100";
 when "01010" =>
 aluOp <= "1101";
 when "01011" =>
 charSend <= reg1(7 downto 0);
 send <= '1';
 when "01100" =>
 reg1 <= x"00" & charRec;
 when "01101" =>
 pc <= reg1;
 rID1 <= "00001";
 regwD1 <= pc;
 wr_enR1 <= '1';
 when "01110" =>
 fbAddr1 <= reg1(11 downto 0);
 fbDout1 <= reg2(15 downto 0);
 when "01111" =>
 fbAddr1 <= reg2(11 downto 0);
 curr <= calc2;
 when others =>
 aluOp <= "0000";
 end case;
 curr <= im_ALU;
 when calc2 =>
 reg1 <= fbDin1;
 curr <= im_ALU;
 when im_ALU =>
 aluSig <= aluResult;
 curr <= store;
 when im_REG =>
 aluSig <= regrD1;
 curr <= store;
 when im_FB =>
 aluSig <= fbDin1;
 curr <= store;
 when im_DATA =>
 aluSig <= dIn;
 curr <= store;
 when store =>
 send <= '0';
 rID2 <= regrD1Sig;
 regwD2 <= aluSig;
 wr_enR2 <= '1';
 curr <= finish;
 when jr =>
 rID1 <= regrD1Sig;
 curr <= im_REG;
 when recv =>
 aluSig <= "00000000" & charRec;
 if (newChar = '0') then
 curr <= recv;
 else
 curr <= store;
 end if;
 when rpix =>
 fbAddr1 <= reg2(11 downto 0);
 curr <= im_FB;
 when wpix =>
 reg1 <= regrD1;
 curr <= wpix2;
 when wpix2 =>
 fbWr_en1 <= '1';
 fbLd <= '1';
 fbAddr1 <= reg1(11 downto 0);
 fbDout1 <= reg2(15 downto 0);
 curr <= finish;
 when sendas =>
 reg1 <= regrD1;
 curr <= sendas2;

 when sendas2 =>
 charSend <= reg1(7 downto 0);
 curr <= sendas3;
 when sendas3 =>
 send <= '1';
 if (ready = '1') then
 curr <= finish;
 else
 curr <= sendas;
 end if;

 when equals =>
 reg1 <= regrD1;
 curr <= equals2;
 when equals2 =>
 if (reg1 = reg2) then
 aluSig <= imm;
 regrD1Sig <= "00001";
 end if;
 curr <= store;
 when nequal =>
 reg1 <= regrD1;
 curr <= nequal2;
 when nequal2 =>
 if (reg1 /= reg2) then
 aluSig <= imm;
 regrD1Sig <= "00001";
 end if;
 curr <= store;
 when ori =>
 aluSig <= imm or reg2;
 curr <= store;
 when lw =>
 dAddr <= std_logic_vector(unsigned(reg2(14 downto 0)) + unsigned(imm(14
downto 0)));
 curr <= im_DATA;
 when sw =>
 dAddr <= std_logic_vector(unsigned(reg2(14 downto 0)) + unsigned(imm(14
downto 0)));
 rID1 <= regrD1Sig;
 curr <= sw2;
 when sw2 =>
 reg1 <= regrD1;
 dOut <= reg1;
 d_wr_en <= '1';
 curr <= finish;
 when jmp =>
 rID1 <= "00001";
 regwD1 <= imm;
 wr_enR1 <= '1';
 curr <= finish;
 when jal =>
 rID1 <= "00010";
 regwD1 <= pc;
 rID2 <= "00001";
 regwD2 <= imm;
 wr_enR1 <= '1';
 wr_enR2 <= '1';
 curr <= finish;
 when clrscr =>
 fbRST <= '1';
 curr <= finish;

 when finish =>
 charSend <= "00000000";
 fbWr_en1 <= '0';
 fbLd <= '0';
 wr_enR1 <= '0';
 wr_enR2 <= '0';
 send <= '0';
 fbRST <= '0';
 d_wr_en <= '0';
 curr <= fetch;
 when others =>
 curr <= fetch;
 end case;
 end if;
 end if;
 end process;
 end fsm;
